● : 정리된 개념
◎ : 찾아야할 개념
※ : 아직 이해못하는 개념.

※ TDD 주도 개발 방법론 의거한 Toy project 진행
  (1) 레드 그린 사이클
    - 항상 실패하는 테스트를 먼저 작성(Red)
    - 테스트가 통과하는 프로덕션 코드를 작성(Green)
    - 테스트가 통과하면 프로덕셔 코드를 리팩토링(Refactor)
  (2) 테스트 코드
    - JUnit4
    - 기능구현 -> 기능 테스트 코드 작성

● ORM (Object Relational Mapping)
  - 객체 모델링을 테이블 모델링과 Mapping
  - Java 표준 ORM = JPA
● JPA (Java Persistence API)
  - 인터페이스 (자바 표준명세서)
  - 구현체
    -> Hibernate, Eclipse-Link 등
    -> 구현체 추상화 : Spring Data JPA
      --> JPA <- Hibernate <- Spring Data JPA
  - JPA와 MyBatis(쿼리매퍼)의 차이점
    -> ORM = 객체 매핑
    -> Sql Mapper = 쿼리 매핑
● 관계형 데이터베이스 관점 : 어떻게 데이터를 저장할 지
  - SQL CRUD
● 객체지향 프로그래밍 관점 : 기능과 속성을 한 곳에서 관리
  - 추상화(객체), 캡슐화(Get,Set), 정보은닉(인터페이스), 다형성(오버라이딩)
    ※ 패러다임 자체가 틀림.
● 차이점 Example
  (1) 객체지향 관점
    - User user = findUser();
      Group group = user.GetGroup();
  (2) 관계형 데이터베이스 관점
    - User user = userDao.findUser();
      Group group = groupDao.findGroup(user.getGroupId());
      ※ 유저 따로 그룹 따로 조회 -> 각 객체간 관계 식별 불가능.
 ● JPA 개념 숙지 후 개발 프로세스
   - 객체지향 프로그래밍 -> JPA 관계형 데이터베이스 SQL 생성
 ● JPA 개념 미숙지 후 개발 프로세스 (SQL Mapper 사용)
   - 객체지향 프로그래밍 -> 각 객체 필드 추출 -> RDBMS 테이블 구조 동일하게 커스터마이징 -> SQL 작성

 ● 등록/ 수정/ 조회 API 만들기
  API를 만들기 위해 총 3개 클래스 필요.
   - Request 데이터를 받을 Dto
   - API 요청을 받을 Controller
   - 트랜잭션, 도메인 기능 간의 순서를 보장하는 Service

 ● Spring 웹 계층.
   (1) Web Layer
     - 흔히 사용하는 컨트롤러(@Controller)와 JSP/Freemarker 등의 View Template 영역.
     - 이외에도 필터(@Filter), 인터셉터, 컨트롤러 어드바이스(@ControllerAdvice)등 외부 요청과 응답에 대한 전반적인 영역.
   (2) Service Layer
     - @Service에 사용되는 서비스 영역.
     - 일반적으로 Controller와 Dao의 중간 영역에서 사용.
     - @Transactional이 사용되어야 하는 영역.
   (3) Repository Layer
     - Database와 같이 데이터 저장소에 접근하는 영역.
     - Dao 역할로 이해하면 쉬움.
   (4) Dtos
     - Dto(Data Transfer Object)는 계층 간에 데이터 교환을 위한 객체를 이야기하며 Dtos는 이들의 영역 의미.
     - 예를 들어 뷰 템플릿 엔진에서 사용될 객체나 Repository Layer에서 결과로 넘겨준 객체 등
   (5) Domain Model
     - 도메인이라 불리는 개발 대상을 모든 사람이 동일한 관점에서 이해할 수 있고 공유할 수 있도록 단순화시킨 것을 도메인 모델이라 한다.
     - 이를테면 택시 앱이라고 하면 배차, 탑승, 요금 등이 모두 도메인
     - @Entity가 사용된 영역 역시 도메인 모델
     - 다만, 무조건 데이터베이스의 테이블과 관계가 있어야만 하는 것은 아님.
     - VO(Value Object)처럼 값 객체들도 이 영역에 해당.
  위 5가지 Layer에서 비즈니스 로직을 처리해야 할 곳은 Domain Layer에서 처리한다.
  기존 Legacy 프로젝트 구조에서 비즈니스 로직은 Service Layer에서 트랜잭션 스크립트 방식으로 처리하였다.
  Domain Layer에서 비즈니스 로직 처리 시 서비스 메소드는 트랜잭션과 도메인 간의 순서만 보장.

 ● JPA 영속성 컨텍스트
  Keyword : 영속성 컨텍스트, 엔티티 매니저, 트랜잭션
   - 엔티티를 영구 저장하는 환경(논리적 개념).
   - JPA의 핵심 내용은 엔티티가 영속성 컨텍스트에 포함되어 있냐 아니냐로 구분될 정도.
   - JPA의 엔티티 매니저가 활성화된 상태로 트랜잭션 안에서 데이터베이스에서 데이터를 가져오면 이 데이터는 영속성 컨텍스트가 유지된 상태.
     -> 이 상태에서 해당 데이터의 값을 변경하면 트랜잭션이 끝나는 시점에 해당 테이블에 변경분을 반영
     -> 즉, Entity 객체의 값만 변경하면 별도로 Update 쿼리를 날릴 필요가 없음.
       ▶ 위와 같은 이유로 JPA에서 Update 쿼리가 없음.
   - 위 개념을 더티 체킹이라 함. (Dirty Checking)
 ◎ JPA 엔티티 매니저(Entity Manager)
   - 검색 필요.
 ● LocalDate (날짜 데이터타입 DB 연동 시 이슈사항)
   - Java8 버전 이후 제공
   - Hibernate 5.2.10 버전 이후 LocalDate, LocalDateTime이 데이터베이스에 제대로 매핑되지 않는 이슈 해결.
     -> SpringBoot 2.x 버전 사용 시 Hibernate 버전 관계없이 사용 가능.
   - 기존 Date와 Calendar 클래스 문제점 개선
     -> 문제점
       (1) 불변객체가 아님.
         - 멀티스레드 환경에서 언제든 문제 발생 가능성.
       (2) Calendar는 월(Month)값이 잘못 설계되어 있음.
         - 10월을 나타내는 Calendar.OCTOBER의 숫자 값은 '9'임.
         - 당연히 '10'으로 생각했던 개발자들에게는 큰 혼란.
     -> 해결방안
       (1) JodaTime이라는 오픈소스로 위 문제점들을 회피했음.
       (2) Java8 이후 LocalDate 클래스로 대체.
 ● View 영역 머스테치(Mustache) Template 선택 이유.
   (1) 템플릿 엔진
     - 지정된 템플릿 양식 + 데이터가 합쳐져 HTML 문서를 출력하는 소프트웨어.
       Ex) JSP, Freemarker / React, Vue
   (2) 서버 템플릿 엔진
     - 종류 : JSP, Freemarker
     - 특징 : 서버에서 Java 코드로 문자열을 만든 뒤 이 문자열을 HTML로 변환하여 브라우저로 전달
   (3) 클라이언트 템플릿 엔진
     - 종류 : React, Vue
     - 특징 : 브라우저에서 화면을 생성. 즉 서버와 관계 x
             서버에서 Json 혹은 Xml 형식의 데이터만 전달하고 클라이언트에서 조립.
     - 추가사항 : 서버사이드 렌더링 기법도 존재
         Ex) V8 엔진 라이브러리 : Nashorn, J2V8
   (4) 예제
     - Q. 자바스크립트에서 JSP나 Freemarker처럼 자바 코드를 사용할 수 있나요?
         A. 서버 템플릿 엔진과 클라이언트 템플릿 엔진에 대한 이해도 부족.
       예제코드)
       <script type="text/javascript">

       $(document).ready(function() {
         if(a=="1") {
         <%
           System.out.println("test");
         %>
         }
       });
       위 코드는 if문과 관계없이 무조건 test를 콘솔에 출력.
         -> 프론트엔드의 자바스크립트(Nodejs 아님)가 작동하는 영역과 JSP가 작동하는 영역이 다르기 때문.
   (5) 선정이유
     - 수많은 언어를 지원하는 가장 심플한 템플릿 엔진.
     - 자바에서 사용될 때는 서버 템플릿 엔진, 자바스크립트에서 사용될 때는 클라이언트 템플릿 엔진으로 사용 가능.
     - 각 템플릿 엔진 별 단점
       (1) JSP, Velocity : 스프링 부트에서는 권장하지 않는 템플릿 엔진.
       (2) Freemarker : 템플릿 엔진으로는 너무 과하게 많은 기능을 지원, 높은 자유도로 인해 숙련도가 낮을수록 Freemarker 안에
                        비즈니스 로직이 추가될 확률이 높음.
       (3) Thymeleaf : 스프링 진영에서 적극적으로 밀고 있지만 문법이 어려움. HTML 태그에 속성으로 템플릿 기능을 사용하는 방식이
                       기존 개발자에게 높은 허들로 느껴지는 경우가 많음. 실제로 사용한 사람들은 자바스크립트 프레임워크를 배우는 기분
                       이라는 후기를 남김. Vue.js를 사용해 본 경험이 있어 태그 속성 방식이 익숙한 사람에게 thymeleaf선택 추천.
     - 머스테치 장점.
       (1) 문법이 다른 템플릿 엔진보다 심플.
       (2) 로직 코드를 사용할 수 없어 View의 역할과 서버의 역할이 명확하게 분리됨.
       (3) Mustache.js와 Mustache.java 2가지가 다 있어, 하나의 문법으로 클라이언트/서버 템플릿을 모두 사용 가능.
       (4) 인텔리제이 커뮤니티 버전에서도 사용 가능.
         -> Thymeleaf나 JSP는 얼티메이트 버전에서 지원.

 ● 오픈소스 프론트엔드 라이브러리 사용 법
   (1) 외부 CDN
   (2) Library
 ● 레이아웃 방식
   - 공통 영역을 별도의 파일로 분리하여 필요한 곳에서 가져다 쓰는 방식.
 ● 조회용 프레임워크
   - 종류
     (1) querydsl
     (2) jooq
     (3) MyBatis
   - 사용이유 : FK조인, 복잡한 조건 등으로 Entity 클래스만으로 처리하기 어려워 사용.
     (1) 타입 안정성이 보장된다.
       - 단순한 문자열로 쿼리를 생성하는게 아닌 메소드를 기반으로 쿼리를 생성하기 때문에 오타나 존재하지 않는 컬럼명을 명시할 경우
         IDE에서 자동으로 검출됨. (Mybatis는 지원하지 않음)
     (2) 국내 많은 회사에서 사용 중
       - 쿠팡 배민 등 JPA를 적극적으로 사용하는 회사에서는 querydsl를 적극적으로 사용.
     (3) 레퍼런스가 많다.
       - 앞 2번의 장점에서 이어지는 것인데, 많은 회사와 개발자들이 사용하다보니 그만큼 국내 자료가 많음.
 ◎ 스프링 시큐리티
   - 인증(Authentication), 권한부여(Authorization) 기능을 가진 프레임워크
   - 스프링 기반의 애플리케이션의 보안을 위한 표준
   - 인터셉터, 필터 기반의 보안 기능을 구현하는 것 보다 스프링 시큐리티를 통해 구현하는 것을 권장. (공식문서)
 ◎ OAuth 2.0
   - Spring Security Oauth2 Client 라이브러리 사용
   - OAuth 2.0 적용 시 주의점
     -> application.properties 파일 내 scope 항목 설정 시 Default 값이 openid, profile, email
     -> openid라는 scope가 있으면 Open Id Provider로 인식됨.
     -> 이렇게 되면 OpenId Provider인 서비스(구글)와 그렇지 않은 서비스(네이버/카카오)로 나눠서 각각
        OAuth2Service를 만들어야 함.
 ◎ springboot에서 properties 파일 인식 방법
   - properties의 이름을 application-xxx.properties 로 만들 시 xxx라는 이름의 profile이 생성
   - profile = xxx라는 식으로 호출하면 해당 properties의 설정들을 Read할 수 있음.
 ● 세션 관리 방법
   (1) 톰캣 세션 사용.
     - Default 값으로 설정되는 방식.
     - 위 경우 톰캣(WAS)에 세션이 저장되기 때문에 2대 이상의 WAS가 구동되는 환경의 경우,
       톰캣들 간에 세션 공유를 위한 추가 설정이 필요.
   (2) 데이터베이스를 세션 저장소 사용.
     - 여러 WAS 간의 공용 세션을 사용할 수 있는 가장 쉬운 방법.
     - 많은 설정이 필요 없지만, 결국 로그인 요청마다 DB IO가 발생하여 성능상 이슈 발생 가능성 있음.
     - 보통 로그인 요청이 많이 없는 백오피스, 사내 시스템 용도에서 사용.
   (3) Redis, Memcached와 같은 메모리 DB를 세션 저장소로 사용.
     - B2C 서비스에서 가장 많이 사용하는 방식.
     - 실제 서비스로 사용하기 위해서는 Embedded Redis와 같은 방식이 아닌 외부 메모리 서버가 필요.

